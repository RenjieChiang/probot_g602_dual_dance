// Generated by gencpp from file probot_msgs/DemoCtrl.msg
// DO NOT EDIT!


#ifndef PROBOT_MSGS_MESSAGE_DEMOCTRL_H
#define PROBOT_MSGS_MESSAGE_DEMOCTRL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace probot_msgs
{
template <class ContainerAllocator>
struct DemoCtrl_
{
  typedef DemoCtrl_<ContainerAllocator> Type;

  DemoCtrl_()
    : ctrl(0)  {
    }
  DemoCtrl_(const ContainerAllocator& _alloc)
    : ctrl(0)  {
  (void)_alloc;
    }



   typedef int8_t _ctrl_type;
  _ctrl_type ctrl;





  typedef boost::shared_ptr< ::probot_msgs::DemoCtrl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::probot_msgs::DemoCtrl_<ContainerAllocator> const> ConstPtr;

}; // struct DemoCtrl_

typedef ::probot_msgs::DemoCtrl_<std::allocator<void> > DemoCtrl;

typedef boost::shared_ptr< ::probot_msgs::DemoCtrl > DemoCtrlPtr;
typedef boost::shared_ptr< ::probot_msgs::DemoCtrl const> DemoCtrlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::probot_msgs::DemoCtrl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::probot_msgs::DemoCtrl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::probot_msgs::DemoCtrl_<ContainerAllocator1> & lhs, const ::probot_msgs::DemoCtrl_<ContainerAllocator2> & rhs)
{
  return lhs.ctrl == rhs.ctrl;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::probot_msgs::DemoCtrl_<ContainerAllocator1> & lhs, const ::probot_msgs::DemoCtrl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace probot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::probot_msgs::DemoCtrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::probot_msgs::DemoCtrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::probot_msgs::DemoCtrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::probot_msgs::DemoCtrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::probot_msgs::DemoCtrl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::probot_msgs::DemoCtrl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::probot_msgs::DemoCtrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc22a86a6761a3ebfb4241b3cec54085";
  }

  static const char* value(const ::probot_msgs::DemoCtrl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc22a86a6761a3ebULL;
  static const uint64_t static_value2 = 0xfb4241b3cec54085ULL;
};

template<class ContainerAllocator>
struct DataType< ::probot_msgs::DemoCtrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "probot_msgs/DemoCtrl";
  }

  static const char* value(const ::probot_msgs::DemoCtrl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::probot_msgs::DemoCtrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 ctrl\n"
;
  }

  static const char* value(const ::probot_msgs::DemoCtrl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::probot_msgs::DemoCtrl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ctrl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DemoCtrl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::probot_msgs::DemoCtrl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::probot_msgs::DemoCtrl_<ContainerAllocator>& v)
  {
    s << indent << "ctrl: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ctrl);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROBOT_MSGS_MESSAGE_DEMOCTRL_H
