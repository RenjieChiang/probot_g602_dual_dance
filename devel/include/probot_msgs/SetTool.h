// Generated by gencpp from file probot_msgs/SetTool.msg
// DO NOT EDIT!


#ifndef PROBOT_MSGS_MESSAGE_SETTOOL_H
#define PROBOT_MSGS_MESSAGE_SETTOOL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace probot_msgs
{
template <class ContainerAllocator>
struct SetTool_
{
  typedef SetTool_<ContainerAllocator> Type;

  SetTool_()
    : status(0)
    , pump_io_number(0)
    , changer_io_number(0)  {
    }
  SetTool_(const ContainerAllocator& _alloc)
    : status(0)
    , pump_io_number(0)
    , changer_io_number(0)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;

   typedef uint16_t _pump_io_number_type;
  _pump_io_number_type pump_io_number;

   typedef uint16_t _changer_io_number_type;
  _changer_io_number_type changer_io_number;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OFF)
  #undef OFF
#endif
#if defined(_WIN32) && defined(ON)
  #undef ON
#endif

  enum {
    OFF = 0u,
    ON = 1u,
  };


  typedef boost::shared_ptr< ::probot_msgs::SetTool_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::probot_msgs::SetTool_<ContainerAllocator> const> ConstPtr;

}; // struct SetTool_

typedef ::probot_msgs::SetTool_<std::allocator<void> > SetTool;

typedef boost::shared_ptr< ::probot_msgs::SetTool > SetToolPtr;
typedef boost::shared_ptr< ::probot_msgs::SetTool const> SetToolConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::probot_msgs::SetTool_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::probot_msgs::SetTool_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::probot_msgs::SetTool_<ContainerAllocator1> & lhs, const ::probot_msgs::SetTool_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.pump_io_number == rhs.pump_io_number &&
    lhs.changer_io_number == rhs.changer_io_number;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::probot_msgs::SetTool_<ContainerAllocator1> & lhs, const ::probot_msgs::SetTool_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace probot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::probot_msgs::SetTool_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::probot_msgs::SetTool_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::probot_msgs::SetTool_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::probot_msgs::SetTool_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::probot_msgs::SetTool_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::probot_msgs::SetTool_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::probot_msgs::SetTool_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7f7565228b99c0ac4e365518708762e2";
  }

  static const char* value(const ::probot_msgs::SetTool_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7f7565228b99c0acULL;
  static const uint64_t static_value2 = 0x4e365518708762e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::probot_msgs::SetTool_<ContainerAllocator> >
{
  static const char* value()
  {
    return "probot_msgs/SetTool";
  }

  static const char* value(const ::probot_msgs::SetTool_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::probot_msgs::SetTool_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 status\n"
"uint16 pump_io_number\n"
"uint16 changer_io_number\n"
"\n"
"uint8 OFF = 0\n"
"uint8 ON  = 1\n"
;
  }

  static const char* value(const ::probot_msgs::SetTool_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::probot_msgs::SetTool_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.pump_io_number);
      stream.next(m.changer_io_number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetTool_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::probot_msgs::SetTool_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::probot_msgs::SetTool_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "pump_io_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pump_io_number);
    s << indent << "changer_io_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.changer_io_number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROBOT_MSGS_MESSAGE_SETTOOL_H
