// Generated by gencpp from file object_color_detector/DetectObjectSrvRequest.msg
// DO NOT EDIT!


#ifndef OBJECT_COLOR_DETECTOR_MESSAGE_DETECTOBJECTSRVREQUEST_H
#define OBJECT_COLOR_DETECTOR_MESSAGE_DETECTOBJECTSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace object_color_detector
{
template <class ContainerAllocator>
struct DetectObjectSrvRequest_
{
  typedef DetectObjectSrvRequest_<ContainerAllocator> Type;

  DetectObjectSrvRequest_()
    : objectType(0)  {
    }
  DetectObjectSrvRequest_(const ContainerAllocator& _alloc)
    : objectType(0)  {
  (void)_alloc;
    }



   typedef int32_t _objectType_type;
  _objectType_type objectType;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RED_OBJECT)
  #undef RED_OBJECT
#endif
#if defined(_WIN32) && defined(GREEN_OBJECT)
  #undef GREEN_OBJECT
#endif
#if defined(_WIN32) && defined(BLUE_OBJECT)
  #undef BLUE_OBJECT
#endif
#if defined(_WIN32) && defined(BLACK_OBJECT)
  #undef BLACK_OBJECT
#endif
#if defined(_WIN32) && defined(ALL_OBJECT)
  #undef ALL_OBJECT
#endif

  enum {
    RED_OBJECT = 0,
    GREEN_OBJECT = 1,
    BLUE_OBJECT = 2,
    BLACK_OBJECT = 3,
    ALL_OBJECT = 255,
  };


  typedef boost::shared_ptr< ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DetectObjectSrvRequest_

typedef ::object_color_detector::DetectObjectSrvRequest_<std::allocator<void> > DetectObjectSrvRequest;

typedef boost::shared_ptr< ::object_color_detector::DetectObjectSrvRequest > DetectObjectSrvRequestPtr;
typedef boost::shared_ptr< ::object_color_detector::DetectObjectSrvRequest const> DetectObjectSrvRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator1> & lhs, const ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.objectType == rhs.objectType;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator1> & lhs, const ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_color_detector

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a43ddbfa268faa8258780f9fd79a559";
  }

  static const char* value(const ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a43ddbfa268faa8ULL;
  static const uint64_t static_value2 = 0x258780f9fd79a559ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_color_detector/DetectObjectSrvRequest";
  }

  static const char* value(const ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The detect object service commands robot to find objects pose\n"
"\n"
"# request constants\n"
"int32 RED_OBJECT    = 0\n"
"int32 GREEN_OBJECT  = 1\n"
"int32 BLUE_OBJECT   = 2\n"
"int32 BLACK_OBJECT  = 3\n"
"\n"
"int32 ALL_OBJECT    = 255\n"
"\n"
"\n"
"# object type:\n"
"int32 objectType\n"
"\n"
;
  }

  static const char* value(const ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.objectType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectObjectSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_color_detector::DetectObjectSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "objectType: ";
    Printer<int32_t>::stream(s, indent + "  ", v.objectType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_COLOR_DETECTOR_MESSAGE_DETECTOBJECTSRVREQUEST_H
